// Code generated by ent, DO NOT EDIT.

package shorts

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/n-creativesystem/short-url/pkg/infrastructure/rdb/ent/predicate"
	"github.com/n-creativesystem/short-url/pkg/utils/credentials"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Shorts {
	return predicate.Shorts(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Shorts {
	return predicate.Shorts(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Shorts {
	return predicate.Shorts(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Shorts {
	return predicate.Shorts(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Shorts {
	return predicate.Shorts(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Shorts {
	return predicate.Shorts(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Shorts {
	return predicate.Shorts(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Shorts {
	return predicate.Shorts(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Shorts {
	return predicate.Shorts(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Shorts {
	return predicate.Shorts(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Shorts {
	return predicate.Shorts(sql.FieldEQ(FieldUpdateTime, v))
}

// Key applies equality check predicate on the "key" field. It's identical to KeyEQ.
func Key(v string) predicate.Shorts {
	return predicate.Shorts(sql.FieldEQ(FieldKey, v))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v credentials.EncryptString) predicate.Shorts {
	return predicate.Shorts(sql.FieldEQ(FieldURL, v))
}

// Author applies equality check predicate on the "author" field. It's identical to AuthorEQ.
func Author(v string) predicate.Shorts {
	return predicate.Shorts(sql.FieldEQ(FieldAuthor, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Shorts {
	return predicate.Shorts(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Shorts {
	return predicate.Shorts(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Shorts {
	return predicate.Shorts(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Shorts {
	return predicate.Shorts(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Shorts {
	return predicate.Shorts(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Shorts {
	return predicate.Shorts(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Shorts {
	return predicate.Shorts(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Shorts {
	return predicate.Shorts(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Shorts {
	return predicate.Shorts(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Shorts {
	return predicate.Shorts(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Shorts {
	return predicate.Shorts(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Shorts {
	return predicate.Shorts(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Shorts {
	return predicate.Shorts(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Shorts {
	return predicate.Shorts(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Shorts {
	return predicate.Shorts(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Shorts {
	return predicate.Shorts(sql.FieldLTE(FieldUpdateTime, v))
}

// KeyEQ applies the EQ predicate on the "key" field.
func KeyEQ(v string) predicate.Shorts {
	return predicate.Shorts(sql.FieldEQ(FieldKey, v))
}

// KeyNEQ applies the NEQ predicate on the "key" field.
func KeyNEQ(v string) predicate.Shorts {
	return predicate.Shorts(sql.FieldNEQ(FieldKey, v))
}

// KeyIn applies the In predicate on the "key" field.
func KeyIn(vs ...string) predicate.Shorts {
	return predicate.Shorts(sql.FieldIn(FieldKey, vs...))
}

// KeyNotIn applies the NotIn predicate on the "key" field.
func KeyNotIn(vs ...string) predicate.Shorts {
	return predicate.Shorts(sql.FieldNotIn(FieldKey, vs...))
}

// KeyGT applies the GT predicate on the "key" field.
func KeyGT(v string) predicate.Shorts {
	return predicate.Shorts(sql.FieldGT(FieldKey, v))
}

// KeyGTE applies the GTE predicate on the "key" field.
func KeyGTE(v string) predicate.Shorts {
	return predicate.Shorts(sql.FieldGTE(FieldKey, v))
}

// KeyLT applies the LT predicate on the "key" field.
func KeyLT(v string) predicate.Shorts {
	return predicate.Shorts(sql.FieldLT(FieldKey, v))
}

// KeyLTE applies the LTE predicate on the "key" field.
func KeyLTE(v string) predicate.Shorts {
	return predicate.Shorts(sql.FieldLTE(FieldKey, v))
}

// KeyContains applies the Contains predicate on the "key" field.
func KeyContains(v string) predicate.Shorts {
	return predicate.Shorts(sql.FieldContains(FieldKey, v))
}

// KeyHasPrefix applies the HasPrefix predicate on the "key" field.
func KeyHasPrefix(v string) predicate.Shorts {
	return predicate.Shorts(sql.FieldHasPrefix(FieldKey, v))
}

// KeyHasSuffix applies the HasSuffix predicate on the "key" field.
func KeyHasSuffix(v string) predicate.Shorts {
	return predicate.Shorts(sql.FieldHasSuffix(FieldKey, v))
}

// KeyEqualFold applies the EqualFold predicate on the "key" field.
func KeyEqualFold(v string) predicate.Shorts {
	return predicate.Shorts(sql.FieldEqualFold(FieldKey, v))
}

// KeyContainsFold applies the ContainsFold predicate on the "key" field.
func KeyContainsFold(v string) predicate.Shorts {
	return predicate.Shorts(sql.FieldContainsFold(FieldKey, v))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v credentials.EncryptString) predicate.Shorts {
	return predicate.Shorts(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v credentials.EncryptString) predicate.Shorts {
	return predicate.Shorts(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...credentials.EncryptString) predicate.Shorts {
	return predicate.Shorts(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...credentials.EncryptString) predicate.Shorts {
	return predicate.Shorts(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v credentials.EncryptString) predicate.Shorts {
	return predicate.Shorts(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v credentials.EncryptString) predicate.Shorts {
	return predicate.Shorts(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v credentials.EncryptString) predicate.Shorts {
	return predicate.Shorts(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v credentials.EncryptString) predicate.Shorts {
	return predicate.Shorts(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v credentials.EncryptString) predicate.Shorts {
	vc := v.String()
	return predicate.Shorts(sql.FieldContains(FieldURL, vc))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v credentials.EncryptString) predicate.Shorts {
	vc := v.String()
	return predicate.Shorts(sql.FieldHasPrefix(FieldURL, vc))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v credentials.EncryptString) predicate.Shorts {
	vc := v.String()
	return predicate.Shorts(sql.FieldHasSuffix(FieldURL, vc))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v credentials.EncryptString) predicate.Shorts {
	vc := v.String()
	return predicate.Shorts(sql.FieldEqualFold(FieldURL, vc))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v credentials.EncryptString) predicate.Shorts {
	vc := v.String()
	return predicate.Shorts(sql.FieldContainsFold(FieldURL, vc))
}

// AuthorEQ applies the EQ predicate on the "author" field.
func AuthorEQ(v string) predicate.Shorts {
	return predicate.Shorts(sql.FieldEQ(FieldAuthor, v))
}

// AuthorNEQ applies the NEQ predicate on the "author" field.
func AuthorNEQ(v string) predicate.Shorts {
	return predicate.Shorts(sql.FieldNEQ(FieldAuthor, v))
}

// AuthorIn applies the In predicate on the "author" field.
func AuthorIn(vs ...string) predicate.Shorts {
	return predicate.Shorts(sql.FieldIn(FieldAuthor, vs...))
}

// AuthorNotIn applies the NotIn predicate on the "author" field.
func AuthorNotIn(vs ...string) predicate.Shorts {
	return predicate.Shorts(sql.FieldNotIn(FieldAuthor, vs...))
}

// AuthorGT applies the GT predicate on the "author" field.
func AuthorGT(v string) predicate.Shorts {
	return predicate.Shorts(sql.FieldGT(FieldAuthor, v))
}

// AuthorGTE applies the GTE predicate on the "author" field.
func AuthorGTE(v string) predicate.Shorts {
	return predicate.Shorts(sql.FieldGTE(FieldAuthor, v))
}

// AuthorLT applies the LT predicate on the "author" field.
func AuthorLT(v string) predicate.Shorts {
	return predicate.Shorts(sql.FieldLT(FieldAuthor, v))
}

// AuthorLTE applies the LTE predicate on the "author" field.
func AuthorLTE(v string) predicate.Shorts {
	return predicate.Shorts(sql.FieldLTE(FieldAuthor, v))
}

// AuthorContains applies the Contains predicate on the "author" field.
func AuthorContains(v string) predicate.Shorts {
	return predicate.Shorts(sql.FieldContains(FieldAuthor, v))
}

// AuthorHasPrefix applies the HasPrefix predicate on the "author" field.
func AuthorHasPrefix(v string) predicate.Shorts {
	return predicate.Shorts(sql.FieldHasPrefix(FieldAuthor, v))
}

// AuthorHasSuffix applies the HasSuffix predicate on the "author" field.
func AuthorHasSuffix(v string) predicate.Shorts {
	return predicate.Shorts(sql.FieldHasSuffix(FieldAuthor, v))
}

// AuthorEqualFold applies the EqualFold predicate on the "author" field.
func AuthorEqualFold(v string) predicate.Shorts {
	return predicate.Shorts(sql.FieldEqualFold(FieldAuthor, v))
}

// AuthorContainsFold applies the ContainsFold predicate on the "author" field.
func AuthorContainsFold(v string) predicate.Shorts {
	return predicate.Shorts(sql.FieldContainsFold(FieldAuthor, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Shorts) predicate.Shorts {
	return predicate.Shorts(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Shorts) predicate.Shorts {
	return predicate.Shorts(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Shorts) predicate.Shorts {
	return predicate.Shorts(func(s *sql.Selector) {
		p(s.Not())
	})
}
