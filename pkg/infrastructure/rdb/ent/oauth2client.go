// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/n-creativesystem/short-url/pkg/infrastructure/rdb/ent/oauth2client"
	"github.com/n-creativesystem/short-url/pkg/utils/credentials"
)

// OAuth2Client is the model entity for the OAuth2Client schema.
type OAuth2Client struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Secret holds the value of the "secret" field.
	Secret credentials.EncryptString `json:"secret,omitempty"`
	// Domain holds the value of the "domain" field.
	Domain credentials.EncryptString `json:"domain,omitempty"`
	// Public holds the value of the "public" field.
	Public bool `json:"public,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// AppName holds the value of the "app_name" field.
	AppName      string `json:"app_name,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OAuth2Client) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case oauth2client.FieldSecret, oauth2client.FieldDomain:
			values[i] = new(credentials.EncryptString)
		case oauth2client.FieldPublic:
			values[i] = new(sql.NullBool)
		case oauth2client.FieldID, oauth2client.FieldUserID, oauth2client.FieldAppName:
			values[i] = new(sql.NullString)
		case oauth2client.FieldCreateTime, oauth2client.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OAuth2Client fields.
func (o *OAuth2Client) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case oauth2client.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				o.ID = value.String
			}
		case oauth2client.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				o.CreateTime = value.Time
			}
		case oauth2client.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				o.UpdateTime = value.Time
			}
		case oauth2client.FieldSecret:
			if value, ok := values[i].(*credentials.EncryptString); !ok {
				return fmt.Errorf("unexpected type %T for field secret", values[i])
			} else if value != nil {
				o.Secret = *value
			}
		case oauth2client.FieldDomain:
			if value, ok := values[i].(*credentials.EncryptString); !ok {
				return fmt.Errorf("unexpected type %T for field domain", values[i])
			} else if value != nil {
				o.Domain = *value
			}
		case oauth2client.FieldPublic:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field public", values[i])
			} else if value.Valid {
				o.Public = value.Bool
			}
		case oauth2client.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				o.UserID = value.String
			}
		case oauth2client.FieldAppName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_name", values[i])
			} else if value.Valid {
				o.AppName = value.String
			}
		default:
			o.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OAuth2Client.
// This includes values selected through modifiers, order, etc.
func (o *OAuth2Client) Value(name string) (ent.Value, error) {
	return o.selectValues.Get(name)
}

// Update returns a builder for updating this OAuth2Client.
// Note that you need to call OAuth2Client.Unwrap() before calling this method if this OAuth2Client
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *OAuth2Client) Update() *OAuth2ClientUpdateOne {
	return NewOAuth2ClientClient(o.config).UpdateOne(o)
}

// Unwrap unwraps the OAuth2Client entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *OAuth2Client) Unwrap() *OAuth2Client {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: OAuth2Client is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *OAuth2Client) String() string {
	var builder strings.Builder
	builder.WriteString("OAuth2Client(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("create_time=")
	builder.WriteString(o.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(o.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("secret=")
	builder.WriteString(fmt.Sprintf("%v", o.Secret))
	builder.WriteString(", ")
	builder.WriteString("domain=")
	builder.WriteString(fmt.Sprintf("%v", o.Domain))
	builder.WriteString(", ")
	builder.WriteString("public=")
	builder.WriteString(fmt.Sprintf("%v", o.Public))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(o.UserID)
	builder.WriteString(", ")
	builder.WriteString("app_name=")
	builder.WriteString(o.AppName)
	builder.WriteByte(')')
	return builder.String()
}

// OAuth2Clients is a parsable slice of OAuth2Client.
type OAuth2Clients []*OAuth2Client
