// Code generated by ent, DO NOT EDIT.

package oauth2client

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/n-creativesystem/short-url/pkg/infrastructure/rdb/ent/predicate"
	"github.com/n-creativesystem/short-url/pkg/utils/credentials"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldContainsFold(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldEQ(FieldUpdateTime, v))
}

// Secret applies equality check predicate on the "secret" field. It's identical to SecretEQ.
func Secret(v credentials.EncryptString) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldEQ(FieldSecret, v))
}

// Domain applies equality check predicate on the "domain" field. It's identical to DomainEQ.
func Domain(v credentials.EncryptString) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldEQ(FieldDomain, v))
}

// Public applies equality check predicate on the "public" field. It's identical to PublicEQ.
func Public(v bool) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldEQ(FieldPublic, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldEQ(FieldUserID, v))
}

// AppName applies equality check predicate on the "app_name" field. It's identical to AppNameEQ.
func AppName(v string) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldEQ(FieldAppName, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldLTE(FieldUpdateTime, v))
}

// SecretEQ applies the EQ predicate on the "secret" field.
func SecretEQ(v credentials.EncryptString) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldEQ(FieldSecret, v))
}

// SecretNEQ applies the NEQ predicate on the "secret" field.
func SecretNEQ(v credentials.EncryptString) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldNEQ(FieldSecret, v))
}

// SecretIn applies the In predicate on the "secret" field.
func SecretIn(vs ...credentials.EncryptString) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldIn(FieldSecret, vs...))
}

// SecretNotIn applies the NotIn predicate on the "secret" field.
func SecretNotIn(vs ...credentials.EncryptString) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldNotIn(FieldSecret, vs...))
}

// SecretGT applies the GT predicate on the "secret" field.
func SecretGT(v credentials.EncryptString) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldGT(FieldSecret, v))
}

// SecretGTE applies the GTE predicate on the "secret" field.
func SecretGTE(v credentials.EncryptString) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldGTE(FieldSecret, v))
}

// SecretLT applies the LT predicate on the "secret" field.
func SecretLT(v credentials.EncryptString) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldLT(FieldSecret, v))
}

// SecretLTE applies the LTE predicate on the "secret" field.
func SecretLTE(v credentials.EncryptString) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldLTE(FieldSecret, v))
}

// SecretContains applies the Contains predicate on the "secret" field.
func SecretContains(v credentials.EncryptString) predicate.OAuth2Client {
	vc := v.String()
	return predicate.OAuth2Client(sql.FieldContains(FieldSecret, vc))
}

// SecretHasPrefix applies the HasPrefix predicate on the "secret" field.
func SecretHasPrefix(v credentials.EncryptString) predicate.OAuth2Client {
	vc := v.String()
	return predicate.OAuth2Client(sql.FieldHasPrefix(FieldSecret, vc))
}

// SecretHasSuffix applies the HasSuffix predicate on the "secret" field.
func SecretHasSuffix(v credentials.EncryptString) predicate.OAuth2Client {
	vc := v.String()
	return predicate.OAuth2Client(sql.FieldHasSuffix(FieldSecret, vc))
}

// SecretEqualFold applies the EqualFold predicate on the "secret" field.
func SecretEqualFold(v credentials.EncryptString) predicate.OAuth2Client {
	vc := v.String()
	return predicate.OAuth2Client(sql.FieldEqualFold(FieldSecret, vc))
}

// SecretContainsFold applies the ContainsFold predicate on the "secret" field.
func SecretContainsFold(v credentials.EncryptString) predicate.OAuth2Client {
	vc := v.String()
	return predicate.OAuth2Client(sql.FieldContainsFold(FieldSecret, vc))
}

// DomainEQ applies the EQ predicate on the "domain" field.
func DomainEQ(v credentials.EncryptString) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldEQ(FieldDomain, v))
}

// DomainNEQ applies the NEQ predicate on the "domain" field.
func DomainNEQ(v credentials.EncryptString) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldNEQ(FieldDomain, v))
}

// DomainIn applies the In predicate on the "domain" field.
func DomainIn(vs ...credentials.EncryptString) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldIn(FieldDomain, vs...))
}

// DomainNotIn applies the NotIn predicate on the "domain" field.
func DomainNotIn(vs ...credentials.EncryptString) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldNotIn(FieldDomain, vs...))
}

// DomainGT applies the GT predicate on the "domain" field.
func DomainGT(v credentials.EncryptString) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldGT(FieldDomain, v))
}

// DomainGTE applies the GTE predicate on the "domain" field.
func DomainGTE(v credentials.EncryptString) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldGTE(FieldDomain, v))
}

// DomainLT applies the LT predicate on the "domain" field.
func DomainLT(v credentials.EncryptString) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldLT(FieldDomain, v))
}

// DomainLTE applies the LTE predicate on the "domain" field.
func DomainLTE(v credentials.EncryptString) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldLTE(FieldDomain, v))
}

// DomainContains applies the Contains predicate on the "domain" field.
func DomainContains(v credentials.EncryptString) predicate.OAuth2Client {
	vc := v.String()
	return predicate.OAuth2Client(sql.FieldContains(FieldDomain, vc))
}

// DomainHasPrefix applies the HasPrefix predicate on the "domain" field.
func DomainHasPrefix(v credentials.EncryptString) predicate.OAuth2Client {
	vc := v.String()
	return predicate.OAuth2Client(sql.FieldHasPrefix(FieldDomain, vc))
}

// DomainHasSuffix applies the HasSuffix predicate on the "domain" field.
func DomainHasSuffix(v credentials.EncryptString) predicate.OAuth2Client {
	vc := v.String()
	return predicate.OAuth2Client(sql.FieldHasSuffix(FieldDomain, vc))
}

// DomainEqualFold applies the EqualFold predicate on the "domain" field.
func DomainEqualFold(v credentials.EncryptString) predicate.OAuth2Client {
	vc := v.String()
	return predicate.OAuth2Client(sql.FieldEqualFold(FieldDomain, vc))
}

// DomainContainsFold applies the ContainsFold predicate on the "domain" field.
func DomainContainsFold(v credentials.EncryptString) predicate.OAuth2Client {
	vc := v.String()
	return predicate.OAuth2Client(sql.FieldContainsFold(FieldDomain, vc))
}

// PublicEQ applies the EQ predicate on the "public" field.
func PublicEQ(v bool) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldEQ(FieldPublic, v))
}

// PublicNEQ applies the NEQ predicate on the "public" field.
func PublicNEQ(v bool) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldNEQ(FieldPublic, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldContainsFold(FieldUserID, v))
}

// AppNameEQ applies the EQ predicate on the "app_name" field.
func AppNameEQ(v string) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldEQ(FieldAppName, v))
}

// AppNameNEQ applies the NEQ predicate on the "app_name" field.
func AppNameNEQ(v string) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldNEQ(FieldAppName, v))
}

// AppNameIn applies the In predicate on the "app_name" field.
func AppNameIn(vs ...string) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldIn(FieldAppName, vs...))
}

// AppNameNotIn applies the NotIn predicate on the "app_name" field.
func AppNameNotIn(vs ...string) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldNotIn(FieldAppName, vs...))
}

// AppNameGT applies the GT predicate on the "app_name" field.
func AppNameGT(v string) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldGT(FieldAppName, v))
}

// AppNameGTE applies the GTE predicate on the "app_name" field.
func AppNameGTE(v string) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldGTE(FieldAppName, v))
}

// AppNameLT applies the LT predicate on the "app_name" field.
func AppNameLT(v string) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldLT(FieldAppName, v))
}

// AppNameLTE applies the LTE predicate on the "app_name" field.
func AppNameLTE(v string) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldLTE(FieldAppName, v))
}

// AppNameContains applies the Contains predicate on the "app_name" field.
func AppNameContains(v string) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldContains(FieldAppName, v))
}

// AppNameHasPrefix applies the HasPrefix predicate on the "app_name" field.
func AppNameHasPrefix(v string) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldHasPrefix(FieldAppName, v))
}

// AppNameHasSuffix applies the HasSuffix predicate on the "app_name" field.
func AppNameHasSuffix(v string) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldHasSuffix(FieldAppName, v))
}

// AppNameEqualFold applies the EqualFold predicate on the "app_name" field.
func AppNameEqualFold(v string) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldEqualFold(FieldAppName, v))
}

// AppNameContainsFold applies the ContainsFold predicate on the "app_name" field.
func AppNameContainsFold(v string) predicate.OAuth2Client {
	return predicate.OAuth2Client(sql.FieldContainsFold(FieldAppName, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OAuth2Client) predicate.OAuth2Client {
	return predicate.OAuth2Client(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OAuth2Client) predicate.OAuth2Client {
	return predicate.OAuth2Client(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OAuth2Client) predicate.OAuth2Client {
	return predicate.OAuth2Client(func(s *sql.Selector) {
		p(s.Not())
	})
}
