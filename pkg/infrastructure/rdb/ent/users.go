// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/n-creativesystem/short-url/pkg/infrastructure/rdb/ent/users"
	"github.com/n-creativesystem/short-url/pkg/utils/credentials"
	"github.com/n-creativesystem/short-url/pkg/utils/hash"
)

// Users is the model entity for the Users schema.
type Users struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Subject holds the value of the "Subject" field.
	Subject string `json:"Subject,omitempty"`
	// Profile holds the value of the "profile" field.
	Profile string `json:"profile,omitempty"`
	// Email holds the value of the "email" field.
	Email credentials.EncryptString `json:"email,omitempty"`
	// EmailHash holds the value of the "email_hash" field.
	EmailHash hash.Hash `json:"email_hash,omitempty"`
	// EmailVerified holds the value of the "email_verified" field.
	EmailVerified bool `json:"email_verified,omitempty"`
	// Username holds the value of the "username" field.
	Username credentials.EncryptString `json:"username,omitempty"`
	// Picture holds the value of the "picture" field.
	Picture string `json:"picture,omitempty"`
	// Claims holds the value of the "claims" field.
	Claims       credentials.EncryptString `json:"claims,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Users) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case users.FieldEmail, users.FieldUsername, users.FieldClaims:
			values[i] = new(credentials.EncryptString)
		case users.FieldEmailHash:
			values[i] = new(hash.Hash)
		case users.FieldEmailVerified:
			values[i] = new(sql.NullBool)
		case users.FieldSubject, users.FieldProfile, users.FieldPicture:
			values[i] = new(sql.NullString)
		case users.FieldCreateTime, users.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case users.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Users fields.
func (u *Users) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case users.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				u.ID = *value
			}
		case users.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				u.CreateTime = value.Time
			}
		case users.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				u.UpdateTime = value.Time
			}
		case users.FieldSubject:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Subject", values[i])
			} else if value.Valid {
				u.Subject = value.String
			}
		case users.FieldProfile:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field profile", values[i])
			} else if value.Valid {
				u.Profile = value.String
			}
		case users.FieldEmail:
			if value, ok := values[i].(*credentials.EncryptString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value != nil {
				u.Email = *value
			}
		case users.FieldEmailHash:
			if value, ok := values[i].(*hash.Hash); !ok {
				return fmt.Errorf("unexpected type %T for field email_hash", values[i])
			} else if value != nil {
				u.EmailHash = *value
			}
		case users.FieldEmailVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field email_verified", values[i])
			} else if value.Valid {
				u.EmailVerified = value.Bool
			}
		case users.FieldUsername:
			if value, ok := values[i].(*credentials.EncryptString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value != nil {
				u.Username = *value
			}
		case users.FieldPicture:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field picture", values[i])
			} else if value.Valid {
				u.Picture = value.String
			}
		case users.FieldClaims:
			if value, ok := values[i].(*credentials.EncryptString); !ok {
				return fmt.Errorf("unexpected type %T for field claims", values[i])
			} else if value != nil {
				u.Claims = *value
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Users.
// This includes values selected through modifiers, order, etc.
func (u *Users) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// Update returns a builder for updating this Users.
// Note that you need to call Users.Unwrap() before calling this method if this Users
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *Users) Update() *UsersUpdateOne {
	return NewUsersClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the Users entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *Users) Unwrap() *Users {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: Users is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *Users) String() string {
	var builder strings.Builder
	builder.WriteString("Users(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("create_time=")
	builder.WriteString(u.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(u.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("Subject=")
	builder.WriteString(u.Subject)
	builder.WriteString(", ")
	builder.WriteString("profile=")
	builder.WriteString(u.Profile)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(fmt.Sprintf("%v", u.Email))
	builder.WriteString(", ")
	builder.WriteString("email_hash=")
	builder.WriteString(fmt.Sprintf("%v", u.EmailHash))
	builder.WriteString(", ")
	builder.WriteString("email_verified=")
	builder.WriteString(fmt.Sprintf("%v", u.EmailVerified))
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(fmt.Sprintf("%v", u.Username))
	builder.WriteString(", ")
	builder.WriteString("picture=")
	builder.WriteString(u.Picture)
	builder.WriteString(", ")
	builder.WriteString("claims=")
	builder.WriteString(fmt.Sprintf("%v", u.Claims))
	builder.WriteByte(')')
	return builder.String()
}

// UsersSlice is a parsable slice of Users.
type UsersSlice []*Users
