// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/n-creativesystem/short-url/pkg/infrastructure/rdb/ent/oauth2token"
)

// OAuth2Token is the model entity for the OAuth2Token schema.
type OAuth2Token struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// ExpiredAt holds the value of the "expired_at" field.
	ExpiredAt int64 `json:"expired_at,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Access holds the value of the "access" field.
	Access string `json:"access,omitempty"`
	// Refresh holds the value of the "refresh" field.
	Refresh string `json:"refresh,omitempty"`
	// Data holds the value of the "data" field.
	Data         string `json:"data,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OAuth2Token) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case oauth2token.FieldID, oauth2token.FieldExpiredAt:
			values[i] = new(sql.NullInt64)
		case oauth2token.FieldCode, oauth2token.FieldAccess, oauth2token.FieldRefresh, oauth2token.FieldData:
			values[i] = new(sql.NullString)
		case oauth2token.FieldCreateTime, oauth2token.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OAuth2Token fields.
func (o *OAuth2Token) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case oauth2token.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			o.ID = int64(value.Int64)
		case oauth2token.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				o.CreateTime = value.Time
			}
		case oauth2token.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				o.UpdateTime = value.Time
			}
		case oauth2token.FieldExpiredAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field expired_at", values[i])
			} else if value.Valid {
				o.ExpiredAt = value.Int64
			}
		case oauth2token.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				o.Code = value.String
			}
		case oauth2token.FieldAccess:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access", values[i])
			} else if value.Valid {
				o.Access = value.String
			}
		case oauth2token.FieldRefresh:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field refresh", values[i])
			} else if value.Valid {
				o.Refresh = value.String
			}
		case oauth2token.FieldData:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field data", values[i])
			} else if value.Valid {
				o.Data = value.String
			}
		default:
			o.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OAuth2Token.
// This includes values selected through modifiers, order, etc.
func (o *OAuth2Token) Value(name string) (ent.Value, error) {
	return o.selectValues.Get(name)
}

// Update returns a builder for updating this OAuth2Token.
// Note that you need to call OAuth2Token.Unwrap() before calling this method if this OAuth2Token
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *OAuth2Token) Update() *OAuth2TokenUpdateOne {
	return NewOAuth2TokenClient(o.config).UpdateOne(o)
}

// Unwrap unwraps the OAuth2Token entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *OAuth2Token) Unwrap() *OAuth2Token {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: OAuth2Token is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *OAuth2Token) String() string {
	var builder strings.Builder
	builder.WriteString("OAuth2Token(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("create_time=")
	builder.WriteString(o.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(o.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("expired_at=")
	builder.WriteString(fmt.Sprintf("%v", o.ExpiredAt))
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(o.Code)
	builder.WriteString(", ")
	builder.WriteString("access=")
	builder.WriteString(o.Access)
	builder.WriteString(", ")
	builder.WriteString("refresh=")
	builder.WriteString(o.Refresh)
	builder.WriteString(", ")
	builder.WriteString("data=")
	builder.WriteString(o.Data)
	builder.WriteByte(')')
	return builder.String()
}

// OAuth2Tokens is a parsable slice of OAuth2Token.
type OAuth2Tokens []*OAuth2Token
