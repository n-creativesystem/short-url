// Code generated by ent, DO NOT EDIT.

package oauth2token

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/n-creativesystem/short-url/pkg/infrastructure/rdb/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldEQ(FieldUpdateTime, v))
}

// ExpiredAt applies equality check predicate on the "expired_at" field. It's identical to ExpiredAtEQ.
func ExpiredAt(v int64) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldEQ(FieldExpiredAt, v))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldEQ(FieldCode, v))
}

// Access applies equality check predicate on the "access" field. It's identical to AccessEQ.
func Access(v string) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldEQ(FieldAccess, v))
}

// Refresh applies equality check predicate on the "refresh" field. It's identical to RefreshEQ.
func Refresh(v string) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldEQ(FieldRefresh, v))
}

// Data applies equality check predicate on the "data" field. It's identical to DataEQ.
func Data(v string) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldEQ(FieldData, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldLTE(FieldUpdateTime, v))
}

// ExpiredAtEQ applies the EQ predicate on the "expired_at" field.
func ExpiredAtEQ(v int64) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldEQ(FieldExpiredAt, v))
}

// ExpiredAtNEQ applies the NEQ predicate on the "expired_at" field.
func ExpiredAtNEQ(v int64) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldNEQ(FieldExpiredAt, v))
}

// ExpiredAtIn applies the In predicate on the "expired_at" field.
func ExpiredAtIn(vs ...int64) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldIn(FieldExpiredAt, vs...))
}

// ExpiredAtNotIn applies the NotIn predicate on the "expired_at" field.
func ExpiredAtNotIn(vs ...int64) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldNotIn(FieldExpiredAt, vs...))
}

// ExpiredAtGT applies the GT predicate on the "expired_at" field.
func ExpiredAtGT(v int64) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldGT(FieldExpiredAt, v))
}

// ExpiredAtGTE applies the GTE predicate on the "expired_at" field.
func ExpiredAtGTE(v int64) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldGTE(FieldExpiredAt, v))
}

// ExpiredAtLT applies the LT predicate on the "expired_at" field.
func ExpiredAtLT(v int64) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldLT(FieldExpiredAt, v))
}

// ExpiredAtLTE applies the LTE predicate on the "expired_at" field.
func ExpiredAtLTE(v int64) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldLTE(FieldExpiredAt, v))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldLTE(FieldCode, v))
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldContains(FieldCode, v))
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldHasPrefix(FieldCode, v))
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldHasSuffix(FieldCode, v))
}

// CodeIsNil applies the IsNil predicate on the "code" field.
func CodeIsNil() predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldIsNull(FieldCode))
}

// CodeNotNil applies the NotNil predicate on the "code" field.
func CodeNotNil() predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldNotNull(FieldCode))
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldEqualFold(FieldCode, v))
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldContainsFold(FieldCode, v))
}

// AccessEQ applies the EQ predicate on the "access" field.
func AccessEQ(v string) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldEQ(FieldAccess, v))
}

// AccessNEQ applies the NEQ predicate on the "access" field.
func AccessNEQ(v string) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldNEQ(FieldAccess, v))
}

// AccessIn applies the In predicate on the "access" field.
func AccessIn(vs ...string) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldIn(FieldAccess, vs...))
}

// AccessNotIn applies the NotIn predicate on the "access" field.
func AccessNotIn(vs ...string) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldNotIn(FieldAccess, vs...))
}

// AccessGT applies the GT predicate on the "access" field.
func AccessGT(v string) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldGT(FieldAccess, v))
}

// AccessGTE applies the GTE predicate on the "access" field.
func AccessGTE(v string) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldGTE(FieldAccess, v))
}

// AccessLT applies the LT predicate on the "access" field.
func AccessLT(v string) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldLT(FieldAccess, v))
}

// AccessLTE applies the LTE predicate on the "access" field.
func AccessLTE(v string) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldLTE(FieldAccess, v))
}

// AccessContains applies the Contains predicate on the "access" field.
func AccessContains(v string) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldContains(FieldAccess, v))
}

// AccessHasPrefix applies the HasPrefix predicate on the "access" field.
func AccessHasPrefix(v string) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldHasPrefix(FieldAccess, v))
}

// AccessHasSuffix applies the HasSuffix predicate on the "access" field.
func AccessHasSuffix(v string) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldHasSuffix(FieldAccess, v))
}

// AccessIsNil applies the IsNil predicate on the "access" field.
func AccessIsNil() predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldIsNull(FieldAccess))
}

// AccessNotNil applies the NotNil predicate on the "access" field.
func AccessNotNil() predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldNotNull(FieldAccess))
}

// AccessEqualFold applies the EqualFold predicate on the "access" field.
func AccessEqualFold(v string) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldEqualFold(FieldAccess, v))
}

// AccessContainsFold applies the ContainsFold predicate on the "access" field.
func AccessContainsFold(v string) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldContainsFold(FieldAccess, v))
}

// RefreshEQ applies the EQ predicate on the "refresh" field.
func RefreshEQ(v string) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldEQ(FieldRefresh, v))
}

// RefreshNEQ applies the NEQ predicate on the "refresh" field.
func RefreshNEQ(v string) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldNEQ(FieldRefresh, v))
}

// RefreshIn applies the In predicate on the "refresh" field.
func RefreshIn(vs ...string) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldIn(FieldRefresh, vs...))
}

// RefreshNotIn applies the NotIn predicate on the "refresh" field.
func RefreshNotIn(vs ...string) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldNotIn(FieldRefresh, vs...))
}

// RefreshGT applies the GT predicate on the "refresh" field.
func RefreshGT(v string) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldGT(FieldRefresh, v))
}

// RefreshGTE applies the GTE predicate on the "refresh" field.
func RefreshGTE(v string) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldGTE(FieldRefresh, v))
}

// RefreshLT applies the LT predicate on the "refresh" field.
func RefreshLT(v string) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldLT(FieldRefresh, v))
}

// RefreshLTE applies the LTE predicate on the "refresh" field.
func RefreshLTE(v string) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldLTE(FieldRefresh, v))
}

// RefreshContains applies the Contains predicate on the "refresh" field.
func RefreshContains(v string) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldContains(FieldRefresh, v))
}

// RefreshHasPrefix applies the HasPrefix predicate on the "refresh" field.
func RefreshHasPrefix(v string) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldHasPrefix(FieldRefresh, v))
}

// RefreshHasSuffix applies the HasSuffix predicate on the "refresh" field.
func RefreshHasSuffix(v string) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldHasSuffix(FieldRefresh, v))
}

// RefreshIsNil applies the IsNil predicate on the "refresh" field.
func RefreshIsNil() predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldIsNull(FieldRefresh))
}

// RefreshNotNil applies the NotNil predicate on the "refresh" field.
func RefreshNotNil() predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldNotNull(FieldRefresh))
}

// RefreshEqualFold applies the EqualFold predicate on the "refresh" field.
func RefreshEqualFold(v string) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldEqualFold(FieldRefresh, v))
}

// RefreshContainsFold applies the ContainsFold predicate on the "refresh" field.
func RefreshContainsFold(v string) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldContainsFold(FieldRefresh, v))
}

// DataEQ applies the EQ predicate on the "data" field.
func DataEQ(v string) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldEQ(FieldData, v))
}

// DataNEQ applies the NEQ predicate on the "data" field.
func DataNEQ(v string) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldNEQ(FieldData, v))
}

// DataIn applies the In predicate on the "data" field.
func DataIn(vs ...string) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldIn(FieldData, vs...))
}

// DataNotIn applies the NotIn predicate on the "data" field.
func DataNotIn(vs ...string) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldNotIn(FieldData, vs...))
}

// DataGT applies the GT predicate on the "data" field.
func DataGT(v string) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldGT(FieldData, v))
}

// DataGTE applies the GTE predicate on the "data" field.
func DataGTE(v string) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldGTE(FieldData, v))
}

// DataLT applies the LT predicate on the "data" field.
func DataLT(v string) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldLT(FieldData, v))
}

// DataLTE applies the LTE predicate on the "data" field.
func DataLTE(v string) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldLTE(FieldData, v))
}

// DataContains applies the Contains predicate on the "data" field.
func DataContains(v string) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldContains(FieldData, v))
}

// DataHasPrefix applies the HasPrefix predicate on the "data" field.
func DataHasPrefix(v string) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldHasPrefix(FieldData, v))
}

// DataHasSuffix applies the HasSuffix predicate on the "data" field.
func DataHasSuffix(v string) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldHasSuffix(FieldData, v))
}

// DataIsNil applies the IsNil predicate on the "data" field.
func DataIsNil() predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldIsNull(FieldData))
}

// DataNotNil applies the NotNil predicate on the "data" field.
func DataNotNil() predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldNotNull(FieldData))
}

// DataEqualFold applies the EqualFold predicate on the "data" field.
func DataEqualFold(v string) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldEqualFold(FieldData, v))
}

// DataContainsFold applies the ContainsFold predicate on the "data" field.
func DataContainsFold(v string) predicate.OAuth2Token {
	return predicate.OAuth2Token(sql.FieldContainsFold(FieldData, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OAuth2Token) predicate.OAuth2Token {
	return predicate.OAuth2Token(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OAuth2Token) predicate.OAuth2Token {
	return predicate.OAuth2Token(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OAuth2Token) predicate.OAuth2Token {
	return predicate.OAuth2Token(func(s *sql.Selector) {
		p(s.Not())
	})
}
