// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/n-creativesystem/short-url/pkg/infrastructure/rdb/ent/shorts"
	"github.com/n-creativesystem/short-url/pkg/utils/credentials"
)

// ShortsCreate is the builder for creating a Shorts entity.
type ShortsCreate struct {
	config
	mutation *ShortsMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (sc *ShortsCreate) SetCreateTime(t time.Time) *ShortsCreate {
	sc.mutation.SetCreateTime(t)
	return sc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (sc *ShortsCreate) SetNillableCreateTime(t *time.Time) *ShortsCreate {
	if t != nil {
		sc.SetCreateTime(*t)
	}
	return sc
}

// SetUpdateTime sets the "update_time" field.
func (sc *ShortsCreate) SetUpdateTime(t time.Time) *ShortsCreate {
	sc.mutation.SetUpdateTime(t)
	return sc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (sc *ShortsCreate) SetNillableUpdateTime(t *time.Time) *ShortsCreate {
	if t != nil {
		sc.SetUpdateTime(*t)
	}
	return sc
}

// SetKey sets the "key" field.
func (sc *ShortsCreate) SetKey(s string) *ShortsCreate {
	sc.mutation.SetKey(s)
	return sc
}

// SetURL sets the "url" field.
func (sc *ShortsCreate) SetURL(cs credentials.EncryptString) *ShortsCreate {
	sc.mutation.SetURL(cs)
	return sc
}

// SetAuthor sets the "author" field.
func (sc *ShortsCreate) SetAuthor(s string) *ShortsCreate {
	sc.mutation.SetAuthor(s)
	return sc
}

// SetID sets the "id" field.
func (sc *ShortsCreate) SetID(i int64) *ShortsCreate {
	sc.mutation.SetID(i)
	return sc
}

// Mutation returns the ShortsMutation object of the builder.
func (sc *ShortsCreate) Mutation() *ShortsMutation {
	return sc.mutation
}

// Save creates the Shorts in the database.
func (sc *ShortsCreate) Save(ctx context.Context) (*Shorts, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *ShortsCreate) SaveX(ctx context.Context) *Shorts {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *ShortsCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *ShortsCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *ShortsCreate) defaults() {
	if _, ok := sc.mutation.CreateTime(); !ok {
		v := shorts.DefaultCreateTime()
		sc.mutation.SetCreateTime(v)
	}
	if _, ok := sc.mutation.UpdateTime(); !ok {
		v := shorts.DefaultUpdateTime()
		sc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *ShortsCreate) check() error {
	if _, ok := sc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Shorts.create_time"`)}
	}
	if _, ok := sc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Shorts.update_time"`)}
	}
	if _, ok := sc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "Shorts.key"`)}
	}
	if v, ok := sc.mutation.Key(); ok {
		if err := shorts.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "Shorts.key": %w`, err)}
		}
	}
	if _, ok := sc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "Shorts.url"`)}
	}
	if v, ok := sc.mutation.URL(); ok {
		if err := shorts.URLValidator(v.String()); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Shorts.url": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Author(); !ok {
		return &ValidationError{Name: "author", err: errors.New(`ent: missing required field "Shorts.author"`)}
	}
	if v, ok := sc.mutation.Author(); ok {
		if err := shorts.AuthorValidator(v); err != nil {
			return &ValidationError{Name: "author", err: fmt.Errorf(`ent: validator failed for field "Shorts.author": %w`, err)}
		}
	}
	return nil
}

func (sc *ShortsCreate) sqlSave(ctx context.Context) (*Shorts, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *ShortsCreate) createSpec() (*Shorts, *sqlgraph.CreateSpec) {
	var (
		_node = &Shorts{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(shorts.Table, sqlgraph.NewFieldSpec(shorts.FieldID, field.TypeInt64))
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.CreateTime(); ok {
		_spec.SetField(shorts.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := sc.mutation.UpdateTime(); ok {
		_spec.SetField(shorts.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := sc.mutation.Key(); ok {
		_spec.SetField(shorts.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := sc.mutation.URL(); ok {
		_spec.SetField(shorts.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := sc.mutation.Author(); ok {
		_spec.SetField(shorts.FieldAuthor, field.TypeString, value)
		_node.Author = value
	}
	return _node, _spec
}

// ShortsCreateBulk is the builder for creating many Shorts entities in bulk.
type ShortsCreateBulk struct {
	config
	builders []*ShortsCreate
}

// Save creates the Shorts entities in the database.
func (scb *ShortsCreateBulk) Save(ctx context.Context) ([]*Shorts, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Shorts, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ShortsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *ShortsCreateBulk) SaveX(ctx context.Context) []*Shorts {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *ShortsCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *ShortsCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
