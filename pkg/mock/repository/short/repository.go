// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package short is a generated GoMock package.
package short

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	short "github.com/n-creativesystem/short-url/pkg/domain/short"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Del mocks base method.
func (m *MockRepository) Del(ctx context.Context, key, author string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Del", ctx, key, author)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Del indicates an expected call of Del.
func (mr *MockRepositoryMockRecorder) Del(ctx, key, author interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockRepository)(nil).Del), ctx, key, author)
}

// Exists mocks base method.
func (m *MockRepository) Exists(ctx context.Context, key string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockRepositoryMockRecorder) Exists(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockRepository)(nil).Exists), ctx, key)
}

// FindAll mocks base method.
func (m *MockRepository) FindAll(ctx context.Context, author string) ([]short.ShortWithTimeStamp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, author)
	ret0, _ := ret[0].([]short.ShortWithTimeStamp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockRepositoryMockRecorder) FindAll(ctx, author interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockRepository)(nil).FindAll), ctx, author)
}

// FindByKeyAndAuthor mocks base method.
func (m *MockRepository) FindByKeyAndAuthor(ctx context.Context, key, author string) (*short.ShortWithTimeStamp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByKeyAndAuthor", ctx, key, author)
	ret0, _ := ret[0].(*short.ShortWithTimeStamp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByKeyAndAuthor indicates an expected call of FindByKeyAndAuthor.
func (mr *MockRepositoryMockRecorder) FindByKeyAndAuthor(ctx, key, author interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByKeyAndAuthor", reflect.TypeOf((*MockRepository)(nil).FindByKeyAndAuthor), ctx, key, author)
}

// Get mocks base method.
func (m *MockRepository) Get(ctx context.Context, key string) (*short.Short, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(*short.Short)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRepositoryMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), ctx, key)
}

// Put mocks base method.
func (m *MockRepository) Put(ctx context.Context, value short.Short) (*short.ShortWithTimeStamp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, value)
	ret0, _ := ret[0].(*short.ShortWithTimeStamp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockRepositoryMockRecorder) Put(ctx, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockRepository)(nil).Put), ctx, value)
}
