// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/n-creativesystem/short-url/pkg/infrastructure/rdb/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"github.com/n-creativesystem/short-url/pkg/infrastructure/rdb/ent/oauth2client"
	"github.com/n-creativesystem/short-url/pkg/infrastructure/rdb/ent/oauth2token"
	"github.com/n-creativesystem/short-url/pkg/infrastructure/rdb/ent/shorts"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// OAuth2Client is the client for interacting with the OAuth2Client builders.
	OAuth2Client *OAuth2ClientClient
	// OAuth2Token is the client for interacting with the OAuth2Token builders.
	OAuth2Token *OAuth2TokenClient
	// Shorts is the client for interacting with the Shorts builders.
	Shorts *ShortsClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.OAuth2Client = NewOAuth2ClientClient(c.config)
	c.OAuth2Token = NewOAuth2TokenClient(c.config)
	c.Shorts = NewShortsClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		OAuth2Client: NewOAuth2ClientClient(cfg),
		OAuth2Token:  NewOAuth2TokenClient(cfg),
		Shorts:       NewShortsClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		OAuth2Client: NewOAuth2ClientClient(cfg),
		OAuth2Token:  NewOAuth2TokenClient(cfg),
		Shorts:       NewShortsClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		OAuth2Client.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.OAuth2Client.Use(hooks...)
	c.OAuth2Token.Use(hooks...)
	c.Shorts.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.OAuth2Client.Intercept(interceptors...)
	c.OAuth2Token.Intercept(interceptors...)
	c.Shorts.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *OAuth2ClientMutation:
		return c.OAuth2Client.mutate(ctx, m)
	case *OAuth2TokenMutation:
		return c.OAuth2Token.mutate(ctx, m)
	case *ShortsMutation:
		return c.Shorts.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// OAuth2ClientClient is a client for the OAuth2Client schema.
type OAuth2ClientClient struct {
	config
}

// NewOAuth2ClientClient returns a client for the OAuth2Client from the given config.
func NewOAuth2ClientClient(c config) *OAuth2ClientClient {
	return &OAuth2ClientClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `oauth2client.Hooks(f(g(h())))`.
func (c *OAuth2ClientClient) Use(hooks ...Hook) {
	c.hooks.OAuth2Client = append(c.hooks.OAuth2Client, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `oauth2client.Intercept(f(g(h())))`.
func (c *OAuth2ClientClient) Intercept(interceptors ...Interceptor) {
	c.inters.OAuth2Client = append(c.inters.OAuth2Client, interceptors...)
}

// Create returns a builder for creating a OAuth2Client entity.
func (c *OAuth2ClientClient) Create() *OAuth2ClientCreate {
	mutation := newOAuth2ClientMutation(c.config, OpCreate)
	return &OAuth2ClientCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OAuth2Client entities.
func (c *OAuth2ClientClient) CreateBulk(builders ...*OAuth2ClientCreate) *OAuth2ClientCreateBulk {
	return &OAuth2ClientCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OAuth2Client.
func (c *OAuth2ClientClient) Update() *OAuth2ClientUpdate {
	mutation := newOAuth2ClientMutation(c.config, OpUpdate)
	return &OAuth2ClientUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OAuth2ClientClient) UpdateOne(o *OAuth2Client) *OAuth2ClientUpdateOne {
	mutation := newOAuth2ClientMutation(c.config, OpUpdateOne, withOAuth2Client(o))
	return &OAuth2ClientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OAuth2ClientClient) UpdateOneID(id string) *OAuth2ClientUpdateOne {
	mutation := newOAuth2ClientMutation(c.config, OpUpdateOne, withOAuth2ClientID(id))
	return &OAuth2ClientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OAuth2Client.
func (c *OAuth2ClientClient) Delete() *OAuth2ClientDelete {
	mutation := newOAuth2ClientMutation(c.config, OpDelete)
	return &OAuth2ClientDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OAuth2ClientClient) DeleteOne(o *OAuth2Client) *OAuth2ClientDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OAuth2ClientClient) DeleteOneID(id string) *OAuth2ClientDeleteOne {
	builder := c.Delete().Where(oauth2client.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OAuth2ClientDeleteOne{builder}
}

// Query returns a query builder for OAuth2Client.
func (c *OAuth2ClientClient) Query() *OAuth2ClientQuery {
	return &OAuth2ClientQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOAuth2Client},
		inters: c.Interceptors(),
	}
}

// Get returns a OAuth2Client entity by its id.
func (c *OAuth2ClientClient) Get(ctx context.Context, id string) (*OAuth2Client, error) {
	return c.Query().Where(oauth2client.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OAuth2ClientClient) GetX(ctx context.Context, id string) *OAuth2Client {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OAuth2ClientClient) Hooks() []Hook {
	return c.hooks.OAuth2Client
}

// Interceptors returns the client interceptors.
func (c *OAuth2ClientClient) Interceptors() []Interceptor {
	return c.inters.OAuth2Client
}

func (c *OAuth2ClientClient) mutate(ctx context.Context, m *OAuth2ClientMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OAuth2ClientCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OAuth2ClientUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OAuth2ClientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OAuth2ClientDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OAuth2Client mutation op: %q", m.Op())
	}
}

// OAuth2TokenClient is a client for the OAuth2Token schema.
type OAuth2TokenClient struct {
	config
}

// NewOAuth2TokenClient returns a client for the OAuth2Token from the given config.
func NewOAuth2TokenClient(c config) *OAuth2TokenClient {
	return &OAuth2TokenClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `oauth2token.Hooks(f(g(h())))`.
func (c *OAuth2TokenClient) Use(hooks ...Hook) {
	c.hooks.OAuth2Token = append(c.hooks.OAuth2Token, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `oauth2token.Intercept(f(g(h())))`.
func (c *OAuth2TokenClient) Intercept(interceptors ...Interceptor) {
	c.inters.OAuth2Token = append(c.inters.OAuth2Token, interceptors...)
}

// Create returns a builder for creating a OAuth2Token entity.
func (c *OAuth2TokenClient) Create() *OAuth2TokenCreate {
	mutation := newOAuth2TokenMutation(c.config, OpCreate)
	return &OAuth2TokenCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OAuth2Token entities.
func (c *OAuth2TokenClient) CreateBulk(builders ...*OAuth2TokenCreate) *OAuth2TokenCreateBulk {
	return &OAuth2TokenCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OAuth2Token.
func (c *OAuth2TokenClient) Update() *OAuth2TokenUpdate {
	mutation := newOAuth2TokenMutation(c.config, OpUpdate)
	return &OAuth2TokenUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OAuth2TokenClient) UpdateOne(o *OAuth2Token) *OAuth2TokenUpdateOne {
	mutation := newOAuth2TokenMutation(c.config, OpUpdateOne, withOAuth2Token(o))
	return &OAuth2TokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OAuth2TokenClient) UpdateOneID(id int64) *OAuth2TokenUpdateOne {
	mutation := newOAuth2TokenMutation(c.config, OpUpdateOne, withOAuth2TokenID(id))
	return &OAuth2TokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OAuth2Token.
func (c *OAuth2TokenClient) Delete() *OAuth2TokenDelete {
	mutation := newOAuth2TokenMutation(c.config, OpDelete)
	return &OAuth2TokenDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OAuth2TokenClient) DeleteOne(o *OAuth2Token) *OAuth2TokenDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OAuth2TokenClient) DeleteOneID(id int64) *OAuth2TokenDeleteOne {
	builder := c.Delete().Where(oauth2token.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OAuth2TokenDeleteOne{builder}
}

// Query returns a query builder for OAuth2Token.
func (c *OAuth2TokenClient) Query() *OAuth2TokenQuery {
	return &OAuth2TokenQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOAuth2Token},
		inters: c.Interceptors(),
	}
}

// Get returns a OAuth2Token entity by its id.
func (c *OAuth2TokenClient) Get(ctx context.Context, id int64) (*OAuth2Token, error) {
	return c.Query().Where(oauth2token.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OAuth2TokenClient) GetX(ctx context.Context, id int64) *OAuth2Token {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OAuth2TokenClient) Hooks() []Hook {
	return c.hooks.OAuth2Token
}

// Interceptors returns the client interceptors.
func (c *OAuth2TokenClient) Interceptors() []Interceptor {
	return c.inters.OAuth2Token
}

func (c *OAuth2TokenClient) mutate(ctx context.Context, m *OAuth2TokenMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OAuth2TokenCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OAuth2TokenUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OAuth2TokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OAuth2TokenDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OAuth2Token mutation op: %q", m.Op())
	}
}

// ShortsClient is a client for the Shorts schema.
type ShortsClient struct {
	config
}

// NewShortsClient returns a client for the Shorts from the given config.
func NewShortsClient(c config) *ShortsClient {
	return &ShortsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `shorts.Hooks(f(g(h())))`.
func (c *ShortsClient) Use(hooks ...Hook) {
	c.hooks.Shorts = append(c.hooks.Shorts, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `shorts.Intercept(f(g(h())))`.
func (c *ShortsClient) Intercept(interceptors ...Interceptor) {
	c.inters.Shorts = append(c.inters.Shorts, interceptors...)
}

// Create returns a builder for creating a Shorts entity.
func (c *ShortsClient) Create() *ShortsCreate {
	mutation := newShortsMutation(c.config, OpCreate)
	return &ShortsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Shorts entities.
func (c *ShortsClient) CreateBulk(builders ...*ShortsCreate) *ShortsCreateBulk {
	return &ShortsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Shorts.
func (c *ShortsClient) Update() *ShortsUpdate {
	mutation := newShortsMutation(c.config, OpUpdate)
	return &ShortsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ShortsClient) UpdateOne(s *Shorts) *ShortsUpdateOne {
	mutation := newShortsMutation(c.config, OpUpdateOne, withShorts(s))
	return &ShortsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ShortsClient) UpdateOneID(id int64) *ShortsUpdateOne {
	mutation := newShortsMutation(c.config, OpUpdateOne, withShortsID(id))
	return &ShortsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Shorts.
func (c *ShortsClient) Delete() *ShortsDelete {
	mutation := newShortsMutation(c.config, OpDelete)
	return &ShortsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ShortsClient) DeleteOne(s *Shorts) *ShortsDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ShortsClient) DeleteOneID(id int64) *ShortsDeleteOne {
	builder := c.Delete().Where(shorts.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ShortsDeleteOne{builder}
}

// Query returns a query builder for Shorts.
func (c *ShortsClient) Query() *ShortsQuery {
	return &ShortsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeShorts},
		inters: c.Interceptors(),
	}
}

// Get returns a Shorts entity by its id.
func (c *ShortsClient) Get(ctx context.Context, id int64) (*Shorts, error) {
	return c.Query().Where(shorts.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ShortsClient) GetX(ctx context.Context, id int64) *Shorts {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ShortsClient) Hooks() []Hook {
	return c.hooks.Shorts
}

// Interceptors returns the client interceptors.
func (c *ShortsClient) Interceptors() []Interceptor {
	return c.inters.Shorts
}

func (c *ShortsClient) mutate(ctx context.Context, m *ShortsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ShortsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ShortsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ShortsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ShortsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Shorts mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		OAuth2Client, OAuth2Token, Shorts []ent.Hook
	}
	inters struct {
		OAuth2Client, OAuth2Token, Shorts []ent.Interceptor
	}
)
