// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package oauth2token is a generated GoMock package.
package oauth2token

import (
	context "context"
	reflect "reflect"

	oauth2 "github.com/go-oauth2/oauth2/v4"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRepository) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockRepositoryMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRepository)(nil).Close))
}

// Create mocks base method.
func (m *MockRepository) Create(ctx context.Context, info oauth2.TokenInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, info)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(ctx, info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), ctx, info)
}

// GetByAccess mocks base method.
func (m *MockRepository) GetByAccess(ctx context.Context, access string) (oauth2.TokenInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAccess", ctx, access)
	ret0, _ := ret[0].(oauth2.TokenInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAccess indicates an expected call of GetByAccess.
func (mr *MockRepositoryMockRecorder) GetByAccess(ctx, access interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAccess", reflect.TypeOf((*MockRepository)(nil).GetByAccess), ctx, access)
}

// GetByCode mocks base method.
func (m *MockRepository) GetByCode(ctx context.Context, code string) (oauth2.TokenInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCode", ctx, code)
	ret0, _ := ret[0].(oauth2.TokenInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCode indicates an expected call of GetByCode.
func (mr *MockRepositoryMockRecorder) GetByCode(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCode", reflect.TypeOf((*MockRepository)(nil).GetByCode), ctx, code)
}

// GetByRefresh mocks base method.
func (m *MockRepository) GetByRefresh(ctx context.Context, refresh string) (oauth2.TokenInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByRefresh", ctx, refresh)
	ret0, _ := ret[0].(oauth2.TokenInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByRefresh indicates an expected call of GetByRefresh.
func (mr *MockRepositoryMockRecorder) GetByRefresh(ctx, refresh interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByRefresh", reflect.TypeOf((*MockRepository)(nil).GetByRefresh), ctx, refresh)
}

// RemoveByAccess mocks base method.
func (m *MockRepository) RemoveByAccess(ctx context.Context, access string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveByAccess", ctx, access)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveByAccess indicates an expected call of RemoveByAccess.
func (mr *MockRepositoryMockRecorder) RemoveByAccess(ctx, access interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveByAccess", reflect.TypeOf((*MockRepository)(nil).RemoveByAccess), ctx, access)
}

// RemoveByCode mocks base method.
func (m *MockRepository) RemoveByCode(ctx context.Context, code string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveByCode", ctx, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveByCode indicates an expected call of RemoveByCode.
func (mr *MockRepositoryMockRecorder) RemoveByCode(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveByCode", reflect.TypeOf((*MockRepository)(nil).RemoveByCode), ctx, code)
}

// RemoveByRefresh mocks base method.
func (m *MockRepository) RemoveByRefresh(ctx context.Context, refresh string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveByRefresh", ctx, refresh)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveByRefresh indicates an expected call of RemoveByRefresh.
func (mr *MockRepositoryMockRecorder) RemoveByRefresh(ctx, refresh interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveByRefresh", reflect.TypeOf((*MockRepository)(nil).RemoveByRefresh), ctx, refresh)
}
