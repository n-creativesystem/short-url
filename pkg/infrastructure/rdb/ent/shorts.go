// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/n-creativesystem/short-url/pkg/infrastructure/rdb/ent/shorts"
	"github.com/n-creativesystem/short-url/pkg/utils/credentials"
)

// Shorts is the model entity for the Shorts schema.
type Shorts struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Key holds the value of the "key" field.
	Key string `json:"key,omitempty"`
	// URL holds the value of the "url" field.
	URL credentials.EncryptString `json:"url,omitempty"`
	// Author holds the value of the "author" field.
	Author       string `json:"author,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Shorts) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case shorts.FieldURL:
			values[i] = new(credentials.EncryptString)
		case shorts.FieldID:
			values[i] = new(sql.NullInt64)
		case shorts.FieldKey, shorts.FieldAuthor:
			values[i] = new(sql.NullString)
		case shorts.FieldCreateTime, shorts.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Shorts fields.
func (s *Shorts) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case shorts.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int64(value.Int64)
		case shorts.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				s.CreateTime = value.Time
			}
		case shorts.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				s.UpdateTime = value.Time
			}
		case shorts.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				s.Key = value.String
			}
		case shorts.FieldURL:
			if value, ok := values[i].(*credentials.EncryptString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value != nil {
				s.URL = *value
			}
		case shorts.FieldAuthor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field author", values[i])
			} else if value.Valid {
				s.Author = value.String
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Shorts.
// This includes values selected through modifiers, order, etc.
func (s *Shorts) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// Update returns a builder for updating this Shorts.
// Note that you need to call Shorts.Unwrap() before calling this method if this Shorts
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Shorts) Update() *ShortsUpdateOne {
	return NewShortsClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Shorts entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Shorts) Unwrap() *Shorts {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Shorts is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Shorts) String() string {
	var builder strings.Builder
	builder.WriteString("Shorts(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("create_time=")
	builder.WriteString(s.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(s.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("key=")
	builder.WriteString(s.Key)
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(fmt.Sprintf("%v", s.URL))
	builder.WriteString(", ")
	builder.WriteString("author=")
	builder.WriteString(s.Author)
	builder.WriteByte(')')
	return builder.String()
}

// ShortsSlice is a parsable slice of Shorts.
type ShortsSlice []*Shorts
