// Code generated by ent, DO NOT EDIT.

package users

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/n-creativesystem/short-url/pkg/infrastructure/rdb/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Users {
	return predicate.Users(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Users {
	return predicate.Users(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Users {
	return predicate.Users(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Users {
	return predicate.Users(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Users {
	return predicate.Users(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Users {
	return predicate.Users(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Users {
	return predicate.Users(sql.FieldLTE(FieldID, id))
}

// Subject applies equality check predicate on the "Subject" field. It's identical to SubjectEQ.
func Subject(v string) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldSubject, v))
}

// Profile applies equality check predicate on the "profile" field. It's identical to ProfileEQ.
func Profile(v string) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldProfile, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldEmail, v))
}

// EmailVerified applies equality check predicate on the "email_verified" field. It's identical to EmailVerifiedEQ.
func EmailVerified(v bool) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldEmailVerified, v))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldUsername, v))
}

// Picture applies equality check predicate on the "picture" field. It's identical to PictureEQ.
func Picture(v string) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldPicture, v))
}

// Claims applies equality check predicate on the "claims" field. It's identical to ClaimsEQ.
func Claims(v []byte) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldClaims, v))
}

// SubjectEQ applies the EQ predicate on the "Subject" field.
func SubjectEQ(v string) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldSubject, v))
}

// SubjectNEQ applies the NEQ predicate on the "Subject" field.
func SubjectNEQ(v string) predicate.Users {
	return predicate.Users(sql.FieldNEQ(FieldSubject, v))
}

// SubjectIn applies the In predicate on the "Subject" field.
func SubjectIn(vs ...string) predicate.Users {
	return predicate.Users(sql.FieldIn(FieldSubject, vs...))
}

// SubjectNotIn applies the NotIn predicate on the "Subject" field.
func SubjectNotIn(vs ...string) predicate.Users {
	return predicate.Users(sql.FieldNotIn(FieldSubject, vs...))
}

// SubjectGT applies the GT predicate on the "Subject" field.
func SubjectGT(v string) predicate.Users {
	return predicate.Users(sql.FieldGT(FieldSubject, v))
}

// SubjectGTE applies the GTE predicate on the "Subject" field.
func SubjectGTE(v string) predicate.Users {
	return predicate.Users(sql.FieldGTE(FieldSubject, v))
}

// SubjectLT applies the LT predicate on the "Subject" field.
func SubjectLT(v string) predicate.Users {
	return predicate.Users(sql.FieldLT(FieldSubject, v))
}

// SubjectLTE applies the LTE predicate on the "Subject" field.
func SubjectLTE(v string) predicate.Users {
	return predicate.Users(sql.FieldLTE(FieldSubject, v))
}

// SubjectContains applies the Contains predicate on the "Subject" field.
func SubjectContains(v string) predicate.Users {
	return predicate.Users(sql.FieldContains(FieldSubject, v))
}

// SubjectHasPrefix applies the HasPrefix predicate on the "Subject" field.
func SubjectHasPrefix(v string) predicate.Users {
	return predicate.Users(sql.FieldHasPrefix(FieldSubject, v))
}

// SubjectHasSuffix applies the HasSuffix predicate on the "Subject" field.
func SubjectHasSuffix(v string) predicate.Users {
	return predicate.Users(sql.FieldHasSuffix(FieldSubject, v))
}

// SubjectEqualFold applies the EqualFold predicate on the "Subject" field.
func SubjectEqualFold(v string) predicate.Users {
	return predicate.Users(sql.FieldEqualFold(FieldSubject, v))
}

// SubjectContainsFold applies the ContainsFold predicate on the "Subject" field.
func SubjectContainsFold(v string) predicate.Users {
	return predicate.Users(sql.FieldContainsFold(FieldSubject, v))
}

// ProfileEQ applies the EQ predicate on the "profile" field.
func ProfileEQ(v string) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldProfile, v))
}

// ProfileNEQ applies the NEQ predicate on the "profile" field.
func ProfileNEQ(v string) predicate.Users {
	return predicate.Users(sql.FieldNEQ(FieldProfile, v))
}

// ProfileIn applies the In predicate on the "profile" field.
func ProfileIn(vs ...string) predicate.Users {
	return predicate.Users(sql.FieldIn(FieldProfile, vs...))
}

// ProfileNotIn applies the NotIn predicate on the "profile" field.
func ProfileNotIn(vs ...string) predicate.Users {
	return predicate.Users(sql.FieldNotIn(FieldProfile, vs...))
}

// ProfileGT applies the GT predicate on the "profile" field.
func ProfileGT(v string) predicate.Users {
	return predicate.Users(sql.FieldGT(FieldProfile, v))
}

// ProfileGTE applies the GTE predicate on the "profile" field.
func ProfileGTE(v string) predicate.Users {
	return predicate.Users(sql.FieldGTE(FieldProfile, v))
}

// ProfileLT applies the LT predicate on the "profile" field.
func ProfileLT(v string) predicate.Users {
	return predicate.Users(sql.FieldLT(FieldProfile, v))
}

// ProfileLTE applies the LTE predicate on the "profile" field.
func ProfileLTE(v string) predicate.Users {
	return predicate.Users(sql.FieldLTE(FieldProfile, v))
}

// ProfileContains applies the Contains predicate on the "profile" field.
func ProfileContains(v string) predicate.Users {
	return predicate.Users(sql.FieldContains(FieldProfile, v))
}

// ProfileHasPrefix applies the HasPrefix predicate on the "profile" field.
func ProfileHasPrefix(v string) predicate.Users {
	return predicate.Users(sql.FieldHasPrefix(FieldProfile, v))
}

// ProfileHasSuffix applies the HasSuffix predicate on the "profile" field.
func ProfileHasSuffix(v string) predicate.Users {
	return predicate.Users(sql.FieldHasSuffix(FieldProfile, v))
}

// ProfileEqualFold applies the EqualFold predicate on the "profile" field.
func ProfileEqualFold(v string) predicate.Users {
	return predicate.Users(sql.FieldEqualFold(FieldProfile, v))
}

// ProfileContainsFold applies the ContainsFold predicate on the "profile" field.
func ProfileContainsFold(v string) predicate.Users {
	return predicate.Users(sql.FieldContainsFold(FieldProfile, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.Users {
	return predicate.Users(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.Users {
	return predicate.Users(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.Users {
	return predicate.Users(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.Users {
	return predicate.Users(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.Users {
	return predicate.Users(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.Users {
	return predicate.Users(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.Users {
	return predicate.Users(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.Users {
	return predicate.Users(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.Users {
	return predicate.Users(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.Users {
	return predicate.Users(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.Users {
	return predicate.Users(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.Users {
	return predicate.Users(sql.FieldContainsFold(FieldEmail, v))
}

// EmailVerifiedEQ applies the EQ predicate on the "email_verified" field.
func EmailVerifiedEQ(v bool) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldEmailVerified, v))
}

// EmailVerifiedNEQ applies the NEQ predicate on the "email_verified" field.
func EmailVerifiedNEQ(v bool) predicate.Users {
	return predicate.Users(sql.FieldNEQ(FieldEmailVerified, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.Users {
	return predicate.Users(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.Users {
	return predicate.Users(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.Users {
	return predicate.Users(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.Users {
	return predicate.Users(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.Users {
	return predicate.Users(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.Users {
	return predicate.Users(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.Users {
	return predicate.Users(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.Users {
	return predicate.Users(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.Users {
	return predicate.Users(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.Users {
	return predicate.Users(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameIsNil applies the IsNil predicate on the "username" field.
func UsernameIsNil() predicate.Users {
	return predicate.Users(sql.FieldIsNull(FieldUsername))
}

// UsernameNotNil applies the NotNil predicate on the "username" field.
func UsernameNotNil() predicate.Users {
	return predicate.Users(sql.FieldNotNull(FieldUsername))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.Users {
	return predicate.Users(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.Users {
	return predicate.Users(sql.FieldContainsFold(FieldUsername, v))
}

// PictureEQ applies the EQ predicate on the "picture" field.
func PictureEQ(v string) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldPicture, v))
}

// PictureNEQ applies the NEQ predicate on the "picture" field.
func PictureNEQ(v string) predicate.Users {
	return predicate.Users(sql.FieldNEQ(FieldPicture, v))
}

// PictureIn applies the In predicate on the "picture" field.
func PictureIn(vs ...string) predicate.Users {
	return predicate.Users(sql.FieldIn(FieldPicture, vs...))
}

// PictureNotIn applies the NotIn predicate on the "picture" field.
func PictureNotIn(vs ...string) predicate.Users {
	return predicate.Users(sql.FieldNotIn(FieldPicture, vs...))
}

// PictureGT applies the GT predicate on the "picture" field.
func PictureGT(v string) predicate.Users {
	return predicate.Users(sql.FieldGT(FieldPicture, v))
}

// PictureGTE applies the GTE predicate on the "picture" field.
func PictureGTE(v string) predicate.Users {
	return predicate.Users(sql.FieldGTE(FieldPicture, v))
}

// PictureLT applies the LT predicate on the "picture" field.
func PictureLT(v string) predicate.Users {
	return predicate.Users(sql.FieldLT(FieldPicture, v))
}

// PictureLTE applies the LTE predicate on the "picture" field.
func PictureLTE(v string) predicate.Users {
	return predicate.Users(sql.FieldLTE(FieldPicture, v))
}

// PictureContains applies the Contains predicate on the "picture" field.
func PictureContains(v string) predicate.Users {
	return predicate.Users(sql.FieldContains(FieldPicture, v))
}

// PictureHasPrefix applies the HasPrefix predicate on the "picture" field.
func PictureHasPrefix(v string) predicate.Users {
	return predicate.Users(sql.FieldHasPrefix(FieldPicture, v))
}

// PictureHasSuffix applies the HasSuffix predicate on the "picture" field.
func PictureHasSuffix(v string) predicate.Users {
	return predicate.Users(sql.FieldHasSuffix(FieldPicture, v))
}

// PictureIsNil applies the IsNil predicate on the "picture" field.
func PictureIsNil() predicate.Users {
	return predicate.Users(sql.FieldIsNull(FieldPicture))
}

// PictureNotNil applies the NotNil predicate on the "picture" field.
func PictureNotNil() predicate.Users {
	return predicate.Users(sql.FieldNotNull(FieldPicture))
}

// PictureEqualFold applies the EqualFold predicate on the "picture" field.
func PictureEqualFold(v string) predicate.Users {
	return predicate.Users(sql.FieldEqualFold(FieldPicture, v))
}

// PictureContainsFold applies the ContainsFold predicate on the "picture" field.
func PictureContainsFold(v string) predicate.Users {
	return predicate.Users(sql.FieldContainsFold(FieldPicture, v))
}

// ClaimsEQ applies the EQ predicate on the "claims" field.
func ClaimsEQ(v []byte) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldClaims, v))
}

// ClaimsNEQ applies the NEQ predicate on the "claims" field.
func ClaimsNEQ(v []byte) predicate.Users {
	return predicate.Users(sql.FieldNEQ(FieldClaims, v))
}

// ClaimsIn applies the In predicate on the "claims" field.
func ClaimsIn(vs ...[]byte) predicate.Users {
	return predicate.Users(sql.FieldIn(FieldClaims, vs...))
}

// ClaimsNotIn applies the NotIn predicate on the "claims" field.
func ClaimsNotIn(vs ...[]byte) predicate.Users {
	return predicate.Users(sql.FieldNotIn(FieldClaims, vs...))
}

// ClaimsGT applies the GT predicate on the "claims" field.
func ClaimsGT(v []byte) predicate.Users {
	return predicate.Users(sql.FieldGT(FieldClaims, v))
}

// ClaimsGTE applies the GTE predicate on the "claims" field.
func ClaimsGTE(v []byte) predicate.Users {
	return predicate.Users(sql.FieldGTE(FieldClaims, v))
}

// ClaimsLT applies the LT predicate on the "claims" field.
func ClaimsLT(v []byte) predicate.Users {
	return predicate.Users(sql.FieldLT(FieldClaims, v))
}

// ClaimsLTE applies the LTE predicate on the "claims" field.
func ClaimsLTE(v []byte) predicate.Users {
	return predicate.Users(sql.FieldLTE(FieldClaims, v))
}

// ClaimsIsNil applies the IsNil predicate on the "claims" field.
func ClaimsIsNil() predicate.Users {
	return predicate.Users(sql.FieldIsNull(FieldClaims))
}

// ClaimsNotNil applies the NotNil predicate on the "claims" field.
func ClaimsNotNil() predicate.Users {
	return predicate.Users(sql.FieldNotNull(FieldClaims))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Users) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Users) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Users) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		p(s.Not())
	})
}
