package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.33

import (
	"context"

	"github.com/n-creativesystem/short-url/pkg/interfaces/handler/graphql/models"
)

// Create is the resolver for the create field.
func (r *mutationResolver) Create(ctx context.Context, input models.CreateURLInput) (*models.URL, error) {
	user, err := authorize(ctx)
	if err != nil {
		return nil, err
	}
	result, err := r.shortUrlSvc.GenerateShortURL(ctx, input.URL.String(), "", user)
	if err != nil {
		return nil, err
	}
	v := models.ShortModelToURL(*result)
	return &v, nil
}

// Urls is the resolver for the urls field.
func (r *queryResolver) Urls(ctx context.Context) (*models.URLType, error) {
	user, err := authorize(ctx)
	if err != nil {
		return nil, err
	}
	urls, err := r.shortUrlSvc.FindAll(ctx, user)
	if err != nil {
		return nil, err
	}
	result := make([]*models.URL, 0, len(urls))
	for _, u := range urls {
		typ := models.ShortModelToURL(u)
		result = append(result, &typ)
	}
	return &models.URLType{
		Result: result,
	}, nil
}

// URL is the resolver for the url field.
func (r *queryResolver) URL(ctx context.Context, key string) (*models.URL, error) {
	user, err := authorize(ctx)
	if err != nil {
		return nil, err
	}
	v, err := r.shortUrlSvc.FindByKeyAndAuthor(ctx, key, user)
	if err != nil {
		return nil, err
	}
	u := models.ShortModelToURL(*v)
	return &u, nil
}
