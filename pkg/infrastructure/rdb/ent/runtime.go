// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/n-creativesystem/short-url/pkg/infrastructure/rdb/ent/oauth2client"
	"github.com/n-creativesystem/short-url/pkg/infrastructure/rdb/ent/oauth2token"
	"github.com/n-creativesystem/short-url/pkg/infrastructure/rdb/ent/schema"
	"github.com/n-creativesystem/short-url/pkg/infrastructure/rdb/ent/shorts"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	oauth2clientMixin := schema.OAuth2Client{}.Mixin()
	oauth2clientMixinFields0 := oauth2clientMixin[0].Fields()
	_ = oauth2clientMixinFields0
	oauth2clientFields := schema.OAuth2Client{}.Fields()
	_ = oauth2clientFields
	// oauth2clientDescCreateTime is the schema descriptor for create_time field.
	oauth2clientDescCreateTime := oauth2clientMixinFields0[0].Descriptor()
	// oauth2client.DefaultCreateTime holds the default value on creation for the create_time field.
	oauth2client.DefaultCreateTime = oauth2clientDescCreateTime.Default.(func() time.Time)
	// oauth2clientDescUpdateTime is the schema descriptor for update_time field.
	oauth2clientDescUpdateTime := oauth2clientMixinFields0[1].Descriptor()
	// oauth2client.DefaultUpdateTime holds the default value on creation for the update_time field.
	oauth2client.DefaultUpdateTime = oauth2clientDescUpdateTime.Default.(func() time.Time)
	// oauth2client.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	oauth2client.UpdateDefaultUpdateTime = oauth2clientDescUpdateTime.UpdateDefault.(func() time.Time)
	// oauth2clientDescSecret is the schema descriptor for secret field.
	oauth2clientDescSecret := oauth2clientFields[1].Descriptor()
	// oauth2client.SecretValidator is a validator for the "secret" field. It is called by the builders before save.
	oauth2client.SecretValidator = func() func(string) error {
		validators := oauth2clientDescSecret.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(secret string) error {
			for _, fn := range fns {
				if err := fn(secret); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// oauth2clientDescDomain is the schema descriptor for domain field.
	oauth2clientDescDomain := oauth2clientFields[2].Descriptor()
	// oauth2client.DomainValidator is a validator for the "domain" field. It is called by the builders before save.
	oauth2client.DomainValidator = oauth2clientDescDomain.Validators[0].(func(string) error)
	// oauth2clientDescUserID is the schema descriptor for user_id field.
	oauth2clientDescUserID := oauth2clientFields[4].Descriptor()
	// oauth2client.UserIDValidator is a validator for the "user_id" field. It is called by the builders before save.
	oauth2client.UserIDValidator = func() func(string) error {
		validators := oauth2clientDescUserID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(user_id string) error {
			for _, fn := range fns {
				if err := fn(user_id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// oauth2clientDescAppName is the schema descriptor for app_name field.
	oauth2clientDescAppName := oauth2clientFields[5].Descriptor()
	// oauth2client.AppNameValidator is a validator for the "app_name" field. It is called by the builders before save.
	oauth2client.AppNameValidator = oauth2clientDescAppName.Validators[0].(func(string) error)
	// oauth2clientDescID is the schema descriptor for id field.
	oauth2clientDescID := oauth2clientFields[0].Descriptor()
	// oauth2client.IDValidator is a validator for the "id" field. It is called by the builders before save.
	oauth2client.IDValidator = func() func(string) error {
		validators := oauth2clientDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	oauth2tokenMixin := schema.OAuth2Token{}.Mixin()
	oauth2tokenMixinFields0 := oauth2tokenMixin[0].Fields()
	_ = oauth2tokenMixinFields0
	oauth2tokenFields := schema.OAuth2Token{}.Fields()
	_ = oauth2tokenFields
	// oauth2tokenDescCreateTime is the schema descriptor for create_time field.
	oauth2tokenDescCreateTime := oauth2tokenMixinFields0[0].Descriptor()
	// oauth2token.DefaultCreateTime holds the default value on creation for the create_time field.
	oauth2token.DefaultCreateTime = oauth2tokenDescCreateTime.Default.(func() time.Time)
	// oauth2tokenDescUpdateTime is the schema descriptor for update_time field.
	oauth2tokenDescUpdateTime := oauth2tokenMixinFields0[1].Descriptor()
	// oauth2token.DefaultUpdateTime holds the default value on creation for the update_time field.
	oauth2token.DefaultUpdateTime = oauth2tokenDescUpdateTime.Default.(func() time.Time)
	// oauth2token.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	oauth2token.UpdateDefaultUpdateTime = oauth2tokenDescUpdateTime.UpdateDefault.(func() time.Time)
	// oauth2tokenDescCode is the schema descriptor for code field.
	oauth2tokenDescCode := oauth2tokenFields[2].Descriptor()
	// oauth2token.CodeValidator is a validator for the "code" field. It is called by the builders before save.
	oauth2token.CodeValidator = oauth2tokenDescCode.Validators[0].(func(string) error)
	// oauth2tokenDescAccess is the schema descriptor for access field.
	oauth2tokenDescAccess := oauth2tokenFields[3].Descriptor()
	// oauth2token.AccessValidator is a validator for the "access" field. It is called by the builders before save.
	oauth2token.AccessValidator = oauth2tokenDescAccess.Validators[0].(func(string) error)
	// oauth2tokenDescRefresh is the schema descriptor for refresh field.
	oauth2tokenDescRefresh := oauth2tokenFields[4].Descriptor()
	// oauth2token.RefreshValidator is a validator for the "refresh" field. It is called by the builders before save.
	oauth2token.RefreshValidator = oauth2tokenDescRefresh.Validators[0].(func(string) error)
	shortsMixin := schema.Shorts{}.Mixin()
	shortsMixinFields0 := shortsMixin[0].Fields()
	_ = shortsMixinFields0
	shortsFields := schema.Shorts{}.Fields()
	_ = shortsFields
	// shortsDescCreateTime is the schema descriptor for create_time field.
	shortsDescCreateTime := shortsMixinFields0[0].Descriptor()
	// shorts.DefaultCreateTime holds the default value on creation for the create_time field.
	shorts.DefaultCreateTime = shortsDescCreateTime.Default.(func() time.Time)
	// shortsDescUpdateTime is the schema descriptor for update_time field.
	shortsDescUpdateTime := shortsMixinFields0[1].Descriptor()
	// shorts.DefaultUpdateTime holds the default value on creation for the update_time field.
	shorts.DefaultUpdateTime = shortsDescUpdateTime.Default.(func() time.Time)
	// shorts.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	shorts.UpdateDefaultUpdateTime = shortsDescUpdateTime.UpdateDefault.(func() time.Time)
	// shortsDescKey is the schema descriptor for key field.
	shortsDescKey := shortsFields[1].Descriptor()
	// shorts.KeyValidator is a validator for the "key" field. It is called by the builders before save.
	shorts.KeyValidator = shortsDescKey.Validators[0].(func(string) error)
	// shortsDescURL is the schema descriptor for url field.
	shortsDescURL := shortsFields[2].Descriptor()
	// shorts.URLValidator is a validator for the "url" field. It is called by the builders before save.
	shorts.URLValidator = shortsDescURL.Validators[0].(func(string) error)
	// shortsDescAuthor is the schema descriptor for author field.
	shortsDescAuthor := shortsFields[3].Descriptor()
	// shorts.AuthorValidator is a validator for the "author" field. It is called by the builders before save.
	shorts.AuthorValidator = func() func(string) error {
		validators := shortsDescAuthor.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(author string) error {
			for _, fn := range fns {
				if err := fn(author); err != nil {
					return err
				}
			}
			return nil
		}
	}()
}
