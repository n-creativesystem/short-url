// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/n-creativesystem/short-url/pkg/infrastructure/rdb/ent/oauth2token"
	"github.com/n-creativesystem/short-url/pkg/infrastructure/rdb/ent/predicate"
)

// OAuth2TokenUpdate is the builder for updating OAuth2Token entities.
type OAuth2TokenUpdate struct {
	config
	hooks    []Hook
	mutation *OAuth2TokenMutation
}

// Where appends a list predicates to the OAuth2TokenUpdate builder.
func (ou *OAuth2TokenUpdate) Where(ps ...predicate.OAuth2Token) *OAuth2TokenUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetUpdateTime sets the "update_time" field.
func (ou *OAuth2TokenUpdate) SetUpdateTime(t time.Time) *OAuth2TokenUpdate {
	ou.mutation.SetUpdateTime(t)
	return ou
}

// SetExpiredAt sets the "expired_at" field.
func (ou *OAuth2TokenUpdate) SetExpiredAt(i int64) *OAuth2TokenUpdate {
	ou.mutation.ResetExpiredAt()
	ou.mutation.SetExpiredAt(i)
	return ou
}

// AddExpiredAt adds i to the "expired_at" field.
func (ou *OAuth2TokenUpdate) AddExpiredAt(i int64) *OAuth2TokenUpdate {
	ou.mutation.AddExpiredAt(i)
	return ou
}

// SetCode sets the "code" field.
func (ou *OAuth2TokenUpdate) SetCode(s string) *OAuth2TokenUpdate {
	ou.mutation.SetCode(s)
	return ou
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (ou *OAuth2TokenUpdate) SetNillableCode(s *string) *OAuth2TokenUpdate {
	if s != nil {
		ou.SetCode(*s)
	}
	return ou
}

// ClearCode clears the value of the "code" field.
func (ou *OAuth2TokenUpdate) ClearCode() *OAuth2TokenUpdate {
	ou.mutation.ClearCode()
	return ou
}

// SetAccess sets the "access" field.
func (ou *OAuth2TokenUpdate) SetAccess(s string) *OAuth2TokenUpdate {
	ou.mutation.SetAccess(s)
	return ou
}

// SetNillableAccess sets the "access" field if the given value is not nil.
func (ou *OAuth2TokenUpdate) SetNillableAccess(s *string) *OAuth2TokenUpdate {
	if s != nil {
		ou.SetAccess(*s)
	}
	return ou
}

// ClearAccess clears the value of the "access" field.
func (ou *OAuth2TokenUpdate) ClearAccess() *OAuth2TokenUpdate {
	ou.mutation.ClearAccess()
	return ou
}

// SetRefresh sets the "refresh" field.
func (ou *OAuth2TokenUpdate) SetRefresh(s string) *OAuth2TokenUpdate {
	ou.mutation.SetRefresh(s)
	return ou
}

// SetNillableRefresh sets the "refresh" field if the given value is not nil.
func (ou *OAuth2TokenUpdate) SetNillableRefresh(s *string) *OAuth2TokenUpdate {
	if s != nil {
		ou.SetRefresh(*s)
	}
	return ou
}

// ClearRefresh clears the value of the "refresh" field.
func (ou *OAuth2TokenUpdate) ClearRefresh() *OAuth2TokenUpdate {
	ou.mutation.ClearRefresh()
	return ou
}

// SetData sets the "data" field.
func (ou *OAuth2TokenUpdate) SetData(s string) *OAuth2TokenUpdate {
	ou.mutation.SetData(s)
	return ou
}

// SetNillableData sets the "data" field if the given value is not nil.
func (ou *OAuth2TokenUpdate) SetNillableData(s *string) *OAuth2TokenUpdate {
	if s != nil {
		ou.SetData(*s)
	}
	return ou
}

// ClearData clears the value of the "data" field.
func (ou *OAuth2TokenUpdate) ClearData() *OAuth2TokenUpdate {
	ou.mutation.ClearData()
	return ou
}

// Mutation returns the OAuth2TokenMutation object of the builder.
func (ou *OAuth2TokenUpdate) Mutation() *OAuth2TokenMutation {
	return ou.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OAuth2TokenUpdate) Save(ctx context.Context) (int, error) {
	ou.defaults()
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OAuth2TokenUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OAuth2TokenUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OAuth2TokenUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ou *OAuth2TokenUpdate) defaults() {
	if _, ok := ou.mutation.UpdateTime(); !ok {
		v := oauth2token.UpdateDefaultUpdateTime()
		ou.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ou *OAuth2TokenUpdate) check() error {
	if v, ok := ou.mutation.Code(); ok {
		if err := oauth2token.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "OAuth2Token.code": %w`, err)}
		}
	}
	if v, ok := ou.mutation.Access(); ok {
		if err := oauth2token.AccessValidator(v); err != nil {
			return &ValidationError{Name: "access", err: fmt.Errorf(`ent: validator failed for field "OAuth2Token.access": %w`, err)}
		}
	}
	if v, ok := ou.mutation.Refresh(); ok {
		if err := oauth2token.RefreshValidator(v); err != nil {
			return &ValidationError{Name: "refresh", err: fmt.Errorf(`ent: validator failed for field "OAuth2Token.refresh": %w`, err)}
		}
	}
	return nil
}

func (ou *OAuth2TokenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(oauth2token.Table, oauth2token.Columns, sqlgraph.NewFieldSpec(oauth2token.FieldID, field.TypeInt64))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.UpdateTime(); ok {
		_spec.SetField(oauth2token.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := ou.mutation.ExpiredAt(); ok {
		_spec.SetField(oauth2token.FieldExpiredAt, field.TypeInt64, value)
	}
	if value, ok := ou.mutation.AddedExpiredAt(); ok {
		_spec.AddField(oauth2token.FieldExpiredAt, field.TypeInt64, value)
	}
	if value, ok := ou.mutation.Code(); ok {
		_spec.SetField(oauth2token.FieldCode, field.TypeString, value)
	}
	if ou.mutation.CodeCleared() {
		_spec.ClearField(oauth2token.FieldCode, field.TypeString)
	}
	if value, ok := ou.mutation.Access(); ok {
		_spec.SetField(oauth2token.FieldAccess, field.TypeString, value)
	}
	if ou.mutation.AccessCleared() {
		_spec.ClearField(oauth2token.FieldAccess, field.TypeString)
	}
	if value, ok := ou.mutation.Refresh(); ok {
		_spec.SetField(oauth2token.FieldRefresh, field.TypeString, value)
	}
	if ou.mutation.RefreshCleared() {
		_spec.ClearField(oauth2token.FieldRefresh, field.TypeString)
	}
	if value, ok := ou.mutation.Data(); ok {
		_spec.SetField(oauth2token.FieldData, field.TypeString, value)
	}
	if ou.mutation.DataCleared() {
		_spec.ClearField(oauth2token.FieldData, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauth2token.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OAuth2TokenUpdateOne is the builder for updating a single OAuth2Token entity.
type OAuth2TokenUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OAuth2TokenMutation
}

// SetUpdateTime sets the "update_time" field.
func (ouo *OAuth2TokenUpdateOne) SetUpdateTime(t time.Time) *OAuth2TokenUpdateOne {
	ouo.mutation.SetUpdateTime(t)
	return ouo
}

// SetExpiredAt sets the "expired_at" field.
func (ouo *OAuth2TokenUpdateOne) SetExpiredAt(i int64) *OAuth2TokenUpdateOne {
	ouo.mutation.ResetExpiredAt()
	ouo.mutation.SetExpiredAt(i)
	return ouo
}

// AddExpiredAt adds i to the "expired_at" field.
func (ouo *OAuth2TokenUpdateOne) AddExpiredAt(i int64) *OAuth2TokenUpdateOne {
	ouo.mutation.AddExpiredAt(i)
	return ouo
}

// SetCode sets the "code" field.
func (ouo *OAuth2TokenUpdateOne) SetCode(s string) *OAuth2TokenUpdateOne {
	ouo.mutation.SetCode(s)
	return ouo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (ouo *OAuth2TokenUpdateOne) SetNillableCode(s *string) *OAuth2TokenUpdateOne {
	if s != nil {
		ouo.SetCode(*s)
	}
	return ouo
}

// ClearCode clears the value of the "code" field.
func (ouo *OAuth2TokenUpdateOne) ClearCode() *OAuth2TokenUpdateOne {
	ouo.mutation.ClearCode()
	return ouo
}

// SetAccess sets the "access" field.
func (ouo *OAuth2TokenUpdateOne) SetAccess(s string) *OAuth2TokenUpdateOne {
	ouo.mutation.SetAccess(s)
	return ouo
}

// SetNillableAccess sets the "access" field if the given value is not nil.
func (ouo *OAuth2TokenUpdateOne) SetNillableAccess(s *string) *OAuth2TokenUpdateOne {
	if s != nil {
		ouo.SetAccess(*s)
	}
	return ouo
}

// ClearAccess clears the value of the "access" field.
func (ouo *OAuth2TokenUpdateOne) ClearAccess() *OAuth2TokenUpdateOne {
	ouo.mutation.ClearAccess()
	return ouo
}

// SetRefresh sets the "refresh" field.
func (ouo *OAuth2TokenUpdateOne) SetRefresh(s string) *OAuth2TokenUpdateOne {
	ouo.mutation.SetRefresh(s)
	return ouo
}

// SetNillableRefresh sets the "refresh" field if the given value is not nil.
func (ouo *OAuth2TokenUpdateOne) SetNillableRefresh(s *string) *OAuth2TokenUpdateOne {
	if s != nil {
		ouo.SetRefresh(*s)
	}
	return ouo
}

// ClearRefresh clears the value of the "refresh" field.
func (ouo *OAuth2TokenUpdateOne) ClearRefresh() *OAuth2TokenUpdateOne {
	ouo.mutation.ClearRefresh()
	return ouo
}

// SetData sets the "data" field.
func (ouo *OAuth2TokenUpdateOne) SetData(s string) *OAuth2TokenUpdateOne {
	ouo.mutation.SetData(s)
	return ouo
}

// SetNillableData sets the "data" field if the given value is not nil.
func (ouo *OAuth2TokenUpdateOne) SetNillableData(s *string) *OAuth2TokenUpdateOne {
	if s != nil {
		ouo.SetData(*s)
	}
	return ouo
}

// ClearData clears the value of the "data" field.
func (ouo *OAuth2TokenUpdateOne) ClearData() *OAuth2TokenUpdateOne {
	ouo.mutation.ClearData()
	return ouo
}

// Mutation returns the OAuth2TokenMutation object of the builder.
func (ouo *OAuth2TokenUpdateOne) Mutation() *OAuth2TokenMutation {
	return ouo.mutation
}

// Where appends a list predicates to the OAuth2TokenUpdate builder.
func (ouo *OAuth2TokenUpdateOne) Where(ps ...predicate.OAuth2Token) *OAuth2TokenUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OAuth2TokenUpdateOne) Select(field string, fields ...string) *OAuth2TokenUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated OAuth2Token entity.
func (ouo *OAuth2TokenUpdateOne) Save(ctx context.Context) (*OAuth2Token, error) {
	ouo.defaults()
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OAuth2TokenUpdateOne) SaveX(ctx context.Context) *OAuth2Token {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OAuth2TokenUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OAuth2TokenUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouo *OAuth2TokenUpdateOne) defaults() {
	if _, ok := ouo.mutation.UpdateTime(); !ok {
		v := oauth2token.UpdateDefaultUpdateTime()
		ouo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouo *OAuth2TokenUpdateOne) check() error {
	if v, ok := ouo.mutation.Code(); ok {
		if err := oauth2token.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "OAuth2Token.code": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.Access(); ok {
		if err := oauth2token.AccessValidator(v); err != nil {
			return &ValidationError{Name: "access", err: fmt.Errorf(`ent: validator failed for field "OAuth2Token.access": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.Refresh(); ok {
		if err := oauth2token.RefreshValidator(v); err != nil {
			return &ValidationError{Name: "refresh", err: fmt.Errorf(`ent: validator failed for field "OAuth2Token.refresh": %w`, err)}
		}
	}
	return nil
}

func (ouo *OAuth2TokenUpdateOne) sqlSave(ctx context.Context) (_node *OAuth2Token, err error) {
	if err := ouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(oauth2token.Table, oauth2token.Columns, sqlgraph.NewFieldSpec(oauth2token.FieldID, field.TypeInt64))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OAuth2Token.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oauth2token.FieldID)
		for _, f := range fields {
			if !oauth2token.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != oauth2token.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.UpdateTime(); ok {
		_spec.SetField(oauth2token.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := ouo.mutation.ExpiredAt(); ok {
		_spec.SetField(oauth2token.FieldExpiredAt, field.TypeInt64, value)
	}
	if value, ok := ouo.mutation.AddedExpiredAt(); ok {
		_spec.AddField(oauth2token.FieldExpiredAt, field.TypeInt64, value)
	}
	if value, ok := ouo.mutation.Code(); ok {
		_spec.SetField(oauth2token.FieldCode, field.TypeString, value)
	}
	if ouo.mutation.CodeCleared() {
		_spec.ClearField(oauth2token.FieldCode, field.TypeString)
	}
	if value, ok := ouo.mutation.Access(); ok {
		_spec.SetField(oauth2token.FieldAccess, field.TypeString, value)
	}
	if ouo.mutation.AccessCleared() {
		_spec.ClearField(oauth2token.FieldAccess, field.TypeString)
	}
	if value, ok := ouo.mutation.Refresh(); ok {
		_spec.SetField(oauth2token.FieldRefresh, field.TypeString, value)
	}
	if ouo.mutation.RefreshCleared() {
		_spec.ClearField(oauth2token.FieldRefresh, field.TypeString)
	}
	if value, ok := ouo.mutation.Data(); ok {
		_spec.SetField(oauth2token.FieldData, field.TypeString, value)
	}
	if ouo.mutation.DataCleared() {
		_spec.ClearField(oauth2token.FieldData, field.TypeString)
	}
	_node = &OAuth2Token{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauth2token.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
