// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-oauth2/oauth2/v4 (interfaces: TokenStore)

// Package oauth2 is a generated GoMock package.
package oauth2

import (
	context "context"
	reflect "reflect"

	oauth2 "github.com/go-oauth2/oauth2/v4"
	gomock "github.com/golang/mock/gomock"
)

// MockTokenStore is a mock of TokenStore interface.
type MockTokenStore struct {
	ctrl     *gomock.Controller
	recorder *MockTokenStoreMockRecorder
}

// MockTokenStoreMockRecorder is the mock recorder for MockTokenStore.
type MockTokenStoreMockRecorder struct {
	mock *MockTokenStore
}

// NewMockTokenStore creates a new mock instance.
func NewMockTokenStore(ctrl *gomock.Controller) *MockTokenStore {
	mock := &MockTokenStore{ctrl: ctrl}
	mock.recorder = &MockTokenStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenStore) EXPECT() *MockTokenStoreMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTokenStore) Create(arg0 context.Context, arg1 oauth2.TokenInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTokenStoreMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTokenStore)(nil).Create), arg0, arg1)
}

// GetByAccess mocks base method.
func (m *MockTokenStore) GetByAccess(arg0 context.Context, arg1 string) (oauth2.TokenInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAccess", arg0, arg1)
	ret0, _ := ret[0].(oauth2.TokenInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAccess indicates an expected call of GetByAccess.
func (mr *MockTokenStoreMockRecorder) GetByAccess(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAccess", reflect.TypeOf((*MockTokenStore)(nil).GetByAccess), arg0, arg1)
}

// GetByCode mocks base method.
func (m *MockTokenStore) GetByCode(arg0 context.Context, arg1 string) (oauth2.TokenInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCode", arg0, arg1)
	ret0, _ := ret[0].(oauth2.TokenInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCode indicates an expected call of GetByCode.
func (mr *MockTokenStoreMockRecorder) GetByCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCode", reflect.TypeOf((*MockTokenStore)(nil).GetByCode), arg0, arg1)
}

// GetByRefresh mocks base method.
func (m *MockTokenStore) GetByRefresh(arg0 context.Context, arg1 string) (oauth2.TokenInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByRefresh", arg0, arg1)
	ret0, _ := ret[0].(oauth2.TokenInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByRefresh indicates an expected call of GetByRefresh.
func (mr *MockTokenStoreMockRecorder) GetByRefresh(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByRefresh", reflect.TypeOf((*MockTokenStore)(nil).GetByRefresh), arg0, arg1)
}

// RemoveByAccess mocks base method.
func (m *MockTokenStore) RemoveByAccess(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveByAccess", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveByAccess indicates an expected call of RemoveByAccess.
func (mr *MockTokenStoreMockRecorder) RemoveByAccess(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveByAccess", reflect.TypeOf((*MockTokenStore)(nil).RemoveByAccess), arg0, arg1)
}

// RemoveByCode mocks base method.
func (m *MockTokenStore) RemoveByCode(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveByCode", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveByCode indicates an expected call of RemoveByCode.
func (mr *MockTokenStoreMockRecorder) RemoveByCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveByCode", reflect.TypeOf((*MockTokenStore)(nil).RemoveByCode), arg0, arg1)
}

// RemoveByRefresh mocks base method.
func (m *MockTokenStore) RemoveByRefresh(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveByRefresh", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveByRefresh indicates an expected call of RemoveByRefresh.
func (mr *MockTokenStoreMockRecorder) RemoveByRefresh(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveByRefresh", reflect.TypeOf((*MockTokenStore)(nil).RemoveByRefresh), arg0, arg1)
}
